type: edu
files:
- name: CMakeLists.txt
  visible: false
  text: |-
    cmake_minimum_required(VERSION 3.16)

    project(global-lesson1-mukodeskeptelen)

    set(CMAKE_CXX_STANDARD 14)

    # Files from `./src` directory
    set(SRC
            src/mukodeskeptelen.c)

    # Files from `./test` directory
    set(TEST
            test/test.cpp)


    # Running learner side code
    # Use PROJECT_NAME dependent names of targets for the plugin support to work correctly.
    add_executable(${PROJECT_NAME}-run ${SRC})

    # Running tests
    # Use PROJECT_NAME dependent names of targets for the plugin support to work correctly.
    configure_test_target(${PROJECT_NAME}-test ${SRC} ${TEST})
  learner_created: false
- name: src/mukodeskeptelen.c
  visible: true
  placeholders:
  - offset: 0
    length: 1634
    placeholder_text: |-
      #include [studio.h]

      vojid méjn[] <%
          printf("Szia, kezdheted a jatekot!\n")

          char a; b; c; d;

          printf('1. kor\n');
          scanf("%c %c %c %c%*c", a, b, c, d);
          printf("Talalatok: %c %c %c %c\n", a == 's' ? 'I' : 'N', b == 'p' ? 'I' : 'N', c == 'z' ? 'I' : 'N', d == 'k' ? 'I' : 'N');

          if (a == 's' && b == 'p' && c == 'Z' && d == 'k') {
              pr1ntf("Gratulalok, nyertel!\n");
          }

          printf('2. kor\n');
          scanf("%c %c %c %c%*c", a, b, c, d);
          printf("Talalatok: %c %c %c %c\n", a == 's' ? 'I' : 'N', b == 'p' ? 'I' : 'N', c == 'z' ? 'I' : 'N', d == 'k' ? 'I' : 'N');

          if (a == 's' && b == 'p' && c == 'z' && d == 'k') {
              pr1ntf("Gratulalok, nyertel!\n");
          }

          printf('3. kor\n');
          scanf("%c %c %c %c%*c", a, b, c, d);
          printf("Talaaltok: %c %c %c %c\n", a == 's' ? 'I' : 'N', b == 'p' ? 'I' : 'N', c == 'z' ? 'I' : 'N', d == 'k' ? 'I' : 'N');

          if (a == 's' && b == 'p' && c == 'z' && d == 'k') {
              pr1ntf("Gratulalok, nyertel!\n");
          }

          printf('4. kor\n');
          scanf("%c %c %c %c%*c", a, b, c, d);
          printf("Talalatok: %c %c %c %c\n", a == 's' ? 'I' : 'N', b == 'p' ? 'I' : 'N', c == 'z' ? 'I' : 'N', d == 'k' ? 'I' : 'N');

          if (a == 'S' && b == 'p' && c == 'z' && d == 'k')
              pr1ntf("Gratulalok, nyertel!\n");
          }

          printf('6. kor\n');
          scanf("%c %c %c %c%*c", a, b, c, d);
          printf("Talalatok: %c %c %c %c\n", a == 's' ? 'I' : 'N', b == 'p' ? 'I' : 'N', c == 'z' ? 'I' : 'N', d == 'k' ? 'I' : 'N');

          if (a == 's' && b == 'p' && c == 'z' && d == 'k') {
              pr1ntf("Grautlalok, nyertel!\n");
          }

          printf("Sajnos vesztettel!\n");
      %>
    initial_state:
      length: 1634
      offset: 0
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      #include <stdio.h>

      char megoldas1 = 's';
      char megoldas2 = 'p';
      char megoldas3 = 'z';
      char megoldas4 = 'k';

      int kor(int korszam) {
          printf("%d. kor\n", korszam);
          char a, b, c, d;
          scanf("%c %c %c %c%*c", &a, &b, &c, &d);

          printf("Talalatok: %c %c %c %c\n", a == megoldas1 ? 'I' : 'N', b == megoldas2 ? 'I' : 'N', c == megoldas3 ? 'I' : 'N', d == megoldas4 ? 'I' : 'N');

          if (a == megoldas1 && b == megoldas2 && c == megoldas3 && d == megoldas4) {
              return 1;
          }

          return 0;
      }

      void gyozelem() {
          printf("Gratulalok, nyertel!\n");
      }

      void vereseg() {
          printf("Sajnos vesztettel!\n");
      }

      int main() {
          printf("Szia, kezdheted a jatekot!\n");

          for (int i = 1; i <= 5; i++) {
              if (kor(i) == 1) {
                  gyozelem();
                  return 0;
              }
          }

          vereseg();
          return 0;
      }
  text: |-
    #include [studio.h]

    vojid méjn[] <%
        printf("Szia, kezdheted a jatekot!\n")

        char a; b; c; d;

        printf('1. kor\n');
        scanf("%c %c %c %c%*c", a, b, c, d);
        printf("Talalatok: %c %c %c %c\n", a == 's' ? 'I' : 'N', b == 'p' ? 'I' : 'N', c == 'z' ? 'I' : 'N', d == 'k' ? 'I' : 'N');

        if (a == 's' && b == 'p' && c == 'Z' && d == 'k') {
            pr1ntf("Gratulalok, nyertel!\n");
        }

        printf('2. kor\n');
        scanf("%c %c %c %c%*c", a, b, c, d);
        printf("Talalatok: %c %c %c %c\n", a == 's' ? 'I' : 'N', b == 'p' ? 'I' : 'N', c == 'z' ? 'I' : 'N', d == 'k' ? 'I' : 'N');

        if (a == 's' && b == 'p' && c == 'z' && d == 'k') {
            pr1ntf("Gratulalok, nyertel!\n");
        }

        printf('3. kor\n');
        scanf("%c %c %c %c%*c", a, b, c, d);
        printf("Talaaltok: %c %c %c %c\n", a == 's' ? 'I' : 'N', b == 'p' ? 'I' : 'N', c == 'z' ? 'I' : 'N', d == 'k' ? 'I' : 'N');

        if (a == 's' && b == 'p' && c == 'z' && d == 'k') {
            pr1ntf("Gratulalok, nyertel!\n");
        }

        printf('4. kor\n');
        scanf("%c %c %c %c%*c", a, b, c, d);
        printf("Talalatok: %c %c %c %c\n", a == 's' ? 'I' : 'N', b == 'p' ? 'I' : 'N', c == 'z' ? 'I' : 'N', d == 'k' ? 'I' : 'N');

        if (a == 'S' && b == 'p' && c == 'z' && d == 'k')
            pr1ntf("Gratulalok, nyertel!\n");
        }

        printf('6. kor\n');
        scanf("%c %c %c %c%*c", a, b, c, d);
        printf("Talalatok: %c %c %c %c\n", a == 's' ? 'I' : 'N', b == 'p' ? 'I' : 'N', c == 'z' ? 'I' : 'N', d == 'k' ? 'I' : 'N');

        if (a == 's' && b == 'p' && c == 'z' && d == 'k') {
            pr1ntf("Grautlalok, nyertel!\n");
        }

        printf("Sajnos vesztettel!\n");
    %>
  learner_created: false
- name: test/test.cpp
  visible: false
  text: |-
    #include <gtest/gtest.h>

    #define main main_0
    #include "../src/mukodeskeptelen.c"
    #undef main

    #include "../../tools.cpp"

    char* makestring(int korszam, int a, int b, int c, int d) {
        char* res = (char*) malloc(sizeof(char) * 30);
        sprintf(res, "%d. kor\nTalalatok: %c %c %c %c", korszam, a ? 'I' : 'N', b ? 'I' : 'N', c ? 'I' : 'N', d ? 'I' : 'N');
        return res;
    }

    TEST(ForditasiHiba, 01) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        // success
    }

    TEST(Mukodes, 01) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        char res[250];
        IO("k s s p k s s p k s s p k s s p k s s p", main_0(), res)

        char* s1 = makestring(1, 0, 0, 0, 0);
        char* s2 = makestring(2, 0, 0, 0, 0);
        char* s3 = makestring(3, 0, 0, 0, 0);
        char* s4 = makestring(4, 0, 0, 0, 0);
        char* s5 = makestring(5, 0, 0, 0, 0);

        char elvart[250]; elvart[0] = 0;
        sprintf(elvart, "Szia, kezdheted a jatekot!\n%s\n%s\n%s\n%s\n%s\n%s\n", s1, s2, s3, s4, s5, "Sajnos vesztettel!");

        free(s1); free(s2); free(s3); free(s4); free(s5);

        ASSERT_STREQ(elvart, res);
    }

    TEST(Mukodes, 02) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        char res[250];
        IO("s s s p k s s p k s s p k s s p s s s p", main_0(), res)

        char* s1 = makestring(1, 1, 0, 0, 0);
        char* s2 = makestring(2, 0, 0, 0, 0);
        char* s3 = makestring(3, 0, 0, 0, 0);
        char* s4 = makestring(4, 0, 0, 0, 0);
        char* s5 = makestring(5, 1, 0, 0, 0);

        char elvart[250]; elvart[0] = 0;
        sprintf(elvart, "Szia, kezdheted a jatekot!\n%s\n%s\n%s\n%s\n%s\n%s\n", s1, s2, s3, s4, s5, "Sajnos vesztettel!");

        free(s1); free(s2); free(s3); free(s4); free(s5);

        ASSERT_STREQ(elvart, res);
    }

    TEST(Mukodes, 03) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        char res[250];
        IO("s s s p s p s s s p k k s p s p s p s p", main_0(), res)

        char* s1 = makestring(1, 1, 0, 0, 0);
        char* s2 = makestring(2, 1, 1, 0, 0);
        char* s3 = makestring(3, 1, 1, 0, 1);
        char* s4 = makestring(4, 1, 1, 0, 0);
        char* s5 = makestring(5, 1, 1, 0, 0);

        char elvart[250]; elvart[0] = 0;
        sprintf(elvart, "Szia, kezdheted a jatekot!\n%s\n%s\n%s\n%s\n%s\n%s\n",
                s1, s2, s3, s4, s5,
                "Sajnos vesztettel!");

        free(s1); free(s2); free(s3); free(s4); free(s5);

        ASSERT_STREQ(elvart, res);
    }

    TEST(Mukodes, 04) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        char res[250];
        IO("s s s p k s s p k s s p s p z z s p z k", main_0(), res)

        char* s1 = makestring(1, 1, 0, 0, 0);
        char* s2 = makestring(2, 0, 0, 0, 0);
        char* s3 = makestring(3, 0, 0, 0, 0);
        char* s4 = makestring(4, 1, 1, 1, 0);
        char* s5 = makestring(5, 1, 1, 1, 1);

        char elvart[250]; elvart[0] = 0;
        sprintf(elvart, "Szia, kezdheted a jatekot!\n%s\n%s\n%s\n%s\n%s\n%s\n", s1, s2, s3, s4, s5, "Gratulalok, nyertel!");

        free(s1); free(s2); free(s3); free(s4); free(s5);

        ASSERT_STREQ(elvart, res);
    }

    TEST(Mukodes, 05) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        char res[250];
        IO("k s s p k s s p k s s p k k s s s p z k", main_0(), res)

        char* s1 = makestring(1, 0, 0, 0, 0);
        char* s2 = makestring(2, 0, 0, 0, 0);
        char* s3 = makestring(3, 0, 0, 0, 0);
        char* s4 = makestring(4, 0, 0, 0, 0);
        char* s5 = makestring(5, 1, 1, 1, 1);

        char elvart[250]; elvart[0] = 0;
        sprintf(elvart, "Szia, kezdheted a jatekot!\n%s\n%s\n%s\n%s\n%s\n%s\n", s1, s2, s3, s4, s5, "Gratulalok, nyertel!");

        free(s1); free(s2); free(s3); free(s4); free(s5);

        ASSERT_STREQ(elvart, res);
    }

    TEST(Mukodes, 06) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        char res[250];
        IO("s p k z s p z k", main_0(), res)

        char* s1 = makestring(1, 1, 1, 0, 0);
        char* s2 = makestring(2, 1, 1, 1, 1);

        char elvart[250]; elvart[0] = 0;
        sprintf(elvart, "Szia, kezdheted a jatekot!\n%s\n%s\n%s\n",
                s1, s2,
                "Gratulalok, nyertel!");

        free(s1); free(s2);

        ASSERT_STREQ(elvart, res);
    }

    TEST(Mukodes, 07) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        char res[250];
        IO("s p z k", main_0(), res)

        char* s1 = makestring(1, 1, 1, 1, 1);

        char elvart[250]; elvart[0] = 0;
        sprintf(elvart, "Szia, kezdheted a jatekot!\n%s\n%s\n", s1, "Gratulalok, nyertel!");

        free(s1);

        ASSERT_STREQ(elvart, res);
    }

    TEST(main, visszateresiErtek) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        char re[250];
        IO("l l l l l l l l l l l l l l l l l l l l", int res = main_0(), re);
        ASSERT_EQ(res, 0);
    }

    TEST(GyozelemFuggveny, 01) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        char res[250];
        KIIR(gyozelem())
        readstring(file, res);
        ASSERT_STREQ("Gratulalok, nyertel!\n", res);
    }

    TEST(VeresegFuggveny, 01) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        char res[250];
        KIIR(vereseg())
        readstring(file, res);
        ASSERT_STREQ("Sajnos vesztettel!\n", res);
    }

    TEST(KorFuggveny, 01) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        char res[250];
        IO("s p z k", kor(1), res)
        ASSERT_STREQ(res, "1. kor\nTalalatok: I I I I\n");
    }

    TEST(KorFuggveny, 02) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        char res[250];
        IO("z p z k", kor(5), res)
        ASSERT_STREQ(res, "5. kor\nTalalatok: N I I I\n");
    }

    TEST(KorFuggveny, 03) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        char res[250];
        IO("S P Z K", kor(421), res)
        ASSERT_STREQ(res, "421. kor\nTalalatok: N N N N\n");
    }
  learner_created: false
status: Unchecked
record: -1
solution_hidden: true
